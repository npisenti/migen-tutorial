import os

from migen.build.generic_platform import *
from migen.build.xilinx import XilinxPlatform
from migen.build.xilinx import common
from migen.build import tools

## VQ44 package
_io = [
	("clk50", 0, Pins("P1"), IOStandard("LVCMOS33")),
	("jtag", 0,
		Subsignal("tck", Pins("P11"), IOStandard("LVCMOS33")),
		Subsignal("tdi", Pins("P9"), IOStandard("LVCMOS33")),
		Subsignal("tdo", Pins("P24"), IOStandard("LVCMOS33")),
		Subsignal("tms", Pins("P10"), IOStandard("LVCMOS33"))
	)
]

## NOTE: Bank 1_6 is P1, which is also the clock pin. Be careful not to algorithmically
## request BANK1, 6 if you are using the sys_clk default clock domain.

## This is the connector for the Dangerous Prototypes coolrunner-II breakout board.
## http://dangerousprototypes.com/docs/CoolRunner-II_CPLD_breakout_board
_connectors = [
	("BANK1", "P39 P40 P41 P42 P43 P44 P1 P2 P3 P5 P6 P8 P12 P13 P14 P16"),
	("BANK2", "P38 P37 P36 P34 P33 P32 P31 P30 P29 P28 P27 P23 P22 P21 P20 P19 P18")
]


class Platform(XilinxPlatform):
	default_clk_name = "clk50"
	default_clk_period = 20.0

	def __init__(self):
		XilinxPlatform.__init__(self, "xc2c64a-7-vq44", _io, _connectors)
        
        # here, we are changing the XilinxToolchain default xst options, since CPLDs
        # don't support some of them.
        # opt_mode SPEED vs AREA?
		self.toolchain.xst_opt = """-ifmt MIXED
-opt_mode AREA"""


	def build(self, *args, **kwargs):
		# need different build commands for cpld, so default build
		# script will not work. Force run=False.
		kwargs.update(run=False)
		return self.toolchain.build(self, *args, **kwargs)


	# define run command, which generates build.sh script
	# defaults to linux environment, because lazy, but could eventually be bootstrapped
	# for more general use.
	def run(self, toolchain_path='/opt/Xilinx', build_dir='build', build_name='top'):
		os.chdir(build_dir)
		build_script_contents = """## AUTOGENERATED from coolrunner.py and Migen
set -e
source {settings}
xst -ifn {build_name}.xst
ngdbuild -uc {build_name}.ucf {build_name}.ngc {build_name}.ngd
cpldfit {build_name}.ngd -p {device}
hprep6 {build_name}.vm6
echo 'Synthesized file: {build_dir}/{build_name}.vm6'"""

		build_script_contents = build_script_contents.format(build_name=build_name,
				    device=self.device,
				    settings=common.settings(toolchain_path, None, "ISE_DS"),
                    build_dir=build_dir)
		
		build_script_file = "build_" + build_name + ".sh"
		tools.write_to_file(build_script_file, build_script_contents, force_unix=False)
		command = ["bash", build_script_file]
		r = tools.subprocess_call_filtered(command, common.colors)
		if r != 0:
			raise OSError("Subprocess failed")



